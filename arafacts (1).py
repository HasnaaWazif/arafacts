# -*- coding: utf-8 -*-
"""AraFacts.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nAl9o2P7LFmX3gCI8qirMPijxx6Gos-F
"""



!pip install transformers
!pip install pandas scikit-learn
!pip install streamlit
!pip install torch seaborn matplotlib

import numpy as np
import pandas as pd
import transformers
from transformers import AutoModel , BertTokenizerFast
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
import torch
import torch.nn as nn
import streamlit as st

# import nltk
# nltk.download('stopwords')

# from nltk.corpus import stopwords
# print(stopwords.words('arabic'))

data = pd.read_csv("/content/AraFacts 2.csv")
data.tail()

# Focus on the relevant columns: 'claim' and 'normalized_label'
filtered_data = data[['claim', 'normalized_label']].dropna()

# Normalize labels to lowercase for consistency
filtered_data['normalized_label'] = filtered_data['normalized_label'].str.lower()

# Update the label mapping
unique_labels = filtered_data['normalized_label'].unique()
label_mapping = {label: idx for idx, label in enumerate(unique_labels)}
filtered_data['label'] = filtered_data['normalized_label'].map(label_mapping)

# Display the updated label mapping
label_mapping

# Check for missing values in the dataset
missing_data = filtered_data.isnull().sum()

# Display the missing data
print("Missing data for each column:")
print(missing_data)

# Preprocess the 'claim' column
import re
def preprocess_text(text):
    text = re.sub(r'[^\u0600-\u06FF\s]', '', text)  # Keep only Arabic characters
    text = re.sub(r'\s+', ' ', text).strip()        # Remove extra spaces
    return text

filtered_data['claim_cleaned'] = filtered_data['claim'].apply(preprocess_text)

# Split the data into training and testing sets
train_texts, test_texts, train_labels, test_labels = train_test_split(
    filtered_data['claim_cleaned'],
    filtered_data['label'],
    test_size=0.2,
    random_state=42
)

# Reset indices for the new datasets
train_texts = train_texts.reset_index(drop=True)
test_texts = test_texts.reset_index(drop=True)
train_labels = train_labels.reset_index(drop=True)
test_labels = test_labels.reset_index(drop=True)


# Print dataset statistics
print("Training samples:", len(train_texts))
print("Testing samples:", len(test_texts))
print("Label mapping:", label_mapping)

from transformers import AutoTokenizer, AutoModelForSequenceClassification
from transformers import Trainer, TrainingArguments
import torch

# Load tokenizer and model
model_name = "aubmindlab/bert-base-arabertv02"  # Use AraBERT or another model
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=len(label_mapping))

# Tokenize texts
train_encodings = tokenizer(list(train_texts), truncation=True, padding=True, max_length=128, return_tensors="pt")
test_encodings = tokenizer(list(test_texts), truncation=True, padding=True, max_length=128, return_tensors="pt")

class AraFactsDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __len__(self):
        return len(self.labels)

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item


train_dataset = AraFactsDataset(train_encodings, train_labels)
test_dataset = AraFactsDataset(test_encodings, test_labels)

import os
os.environ["WANDB_DISABLED"] = "true"

import torch
print(torch.cuda.is_available())  # Should return True if GPU is available

print(f"Filtered DataFrame has {len(filtered_data)} rows.")
if len(filtered_data) > 0:
    print("First row:\n", filtered_data.iloc[0])
    print("Last row:\n", filtered_data.iloc[-1])

# Training arguments
training_args = TrainingArguments(
    output_dir="./results",         # Directory to save results
    num_train_epochs=3,             # Number of training epochs
    per_device_train_batch_size=16, # Batch size for training
    per_device_eval_batch_size=16,  # Batch size for evaluation
    evaluation_strategy="epoch",    # Evaluate after every epoch
    save_strategy="epoch",          # Save model after every epoch
    logging_dir="./logs",           # Directory for logs
    logging_steps=10,
    report_to="none",               # Disables W&B integration
)

# Trainer setup
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=test_dataset,
)

# Train the model
trainer.train()

from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# تقييم النموذج
predictions = trainer.predict(test_dataset)
preds = torch.argmax(torch.tensor(predictions.predictions), dim=1)

# تقرير التصنيف
print(classification_report(test_labels, preds.numpy(), target_names=label_mapping.keys()))

# مصفوفة الارتباك
cm = confusion_matrix(test_labels, preds.numpy())
sns.heatmap(cm, annot=True, fmt='d', xticklabels=label_mapping.keys(), yticklabels=label_mapping.keys())
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

import streamlit as st
import torch

# Load and prepare the model
model.eval()
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# Streamlit interface
st.title("Arabic Claim Fact-Checking")
input_claim = st.text_input("Enter an Arabic claim:")
st.write("Example claims:")
st.write("1. الشمس تدور حول الأرض.")
st.write("2. الأرض كروية الشكل.")

if st.button("Check Fact"):
    if input_claim:
        try:
            # Process the input text
            inputs = tokenizer(input_claim, return_tensors="pt", truncation=True, padding=True, max_length=128).to(device)
            outputs = model(**inputs)
            prediction = torch.argmax(outputs.logits, dim=1).item()
            label = {0: "True", 1: "False", 2: "Misleading"}[prediction]
            st.write(f"The claim is **{label}**")
        except Exception as e:
            st.error(f"An error occurred: {e}")
    else:
        st.warning("Please enter a claim to check.")

# Define your application code as a string
code = """
import streamlit as st
import torch

# Load and prepare the model
model.eval()
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# Streamlit interface
st.title("Arabic Claim Fact-Checking")
input_claim = st.text_input("Enter an Arabic claim:")
st.write("Example claims:")
st.write("1. الشمس تدور حول الأرض.")
st.write("2. الأرض كروية الشكل.")

if st.button("Check Fact"):
    if input_claim:
        try:
            # Process the input text
            inputs = tokenizer(input_claim, return_tensors="pt", truncation=True, padding=True, max_length=128).to(device)
            outputs = model(**inputs)
            prediction = torch.argmax(outputs.logits, dim=1).item()
            label = {0: "True", 1: "False", 2: "Misleading"}[prediction]
            st.write(f"The claim is **{label}**")
        except Exception as e:
            st.error(f"An error occurred: {e}")
    else:
        st.warning("Please enter a claim to check.")
"""

with open("fact_checker_app.py", "w") as file:
    file.write(code)


print(f"Code saved to {file_path}")

!pip install streamlit -q

!streamlit run fact_checker_app.py & npx localtunnel --port 8501

